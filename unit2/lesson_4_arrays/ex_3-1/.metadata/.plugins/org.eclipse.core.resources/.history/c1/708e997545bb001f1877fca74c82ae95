/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

CAN_HandleTypeDef hcan;

RTC_HandleTypeDef hrtc;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */

uint8_t halla=0;
uint8_t hallb=0;
uint8_t hallc=0;

uint8_t hall ;
uint8_t hallCounts[] = {0, 0, 0};
uint8_t step=7;
uint8_t halla_flag=0;
uint8_t hallb_flag=0;
uint8_t hallc_flag=0;
uint16_t  duty;

uint16_t  vcs_raw=0;
uint16_t  vcs=0;
uint16_t  current;
float  sensitivity=0.2;


uint8_t   flag=0;
uint16_t duty3[] = {0, 0};

uint8_t TX_data[8]={};
uint8_t RX_data[8];

  uint32_t RXID,RXDLC;
  uint8_t ADC_RECIVED=0;
  uint8_t ADC_SENT=0;
  uint8_t sent;
  uint8_t mailboxused;

  int32_t time_val;
  int32_t last_time_val;
  int16_t overflows;
  uint32_t period;
  uint32_t rpm;
  float raduis_m=0.41;
  uint16_t speed_ms;
  uint16_t speed_km;
  float distance;
  float total_dis=0;
  uint8_t seconds;

  uint8_t halcannum;
  	uint8_t mailbox;
  	uint8_t ppr =21;
  uint16_t	current_raw=0;




/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_CAN_Init(void);
static void MX_TIM1_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
///////////////////////////////////////////////////
void steps(void) {



    switch (hall) {
        case 3:
            step = 1;
            break;
        case 2:
            step = 2;
            break;
        case 6:
            step = 3;
            break;
        case 4:
            step = 4;
            break;
        case 5:
            step = 5;
            break;
        case 1:
            step = 6;
            break;
        default:
        	step = 7;
            break;
    }
}

//////////////////////////////////////////////////////////////////
void get_hall(void){
	if (halla_flag==1)
		{
			for (uint8_t i = 0; i < 5; i++)
				{
					hallCounts[0] += HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
				}

			halla=0;

			if (hallCounts[0] >= 5)
		        {
		             halla = 1;
		        }

		    hallCounts[0]=0;
		    halla_flag=0;


		 	 	 }

	else if (hallb_flag==1)
		{

			for (uint8_t i = 0; i < 5; i++)
				{
					hallCounts[1] += HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
				}

				hallb=0;

			if (hallCounts[1] >= 5)
				{
					  hallb = 1;
				}

			hallCounts[1]=0;
		    hallb_flag=0;

		}
		 else if (hallc_flag==1)
		{


		   for (uint8_t i = 0; i < 5; i++)
		    	{
		    		hallCounts[2] += HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
		    	}

		    hallc=0;

		    if (hallCounts[2] >= 5)
		    	{
		    		hallc = 1;
		    	}

		    	hallCounts[2]=0;
		    	hallc_flag=0;
		    }
		hall = (hallc << 2) | (hallb << 1) | halla;
}

//////////////////////////////////////////////////////////////////
void comutate(void){
	if(step==1)//110
		  {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		  	 HAL_Delay(1);

		  	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,duty);
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);

		  }
		  else if(step==2)//001
		  {
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
			  	  HAL_Delay(1);

			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,duty);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);

		  }
		  else if(step==3)//010
		  {
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
			  	  HAL_Delay(1);

			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,duty);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);

		  }
		  else if(step==4)//011
		  {
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
			  	  HAL_Delay(1);

			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,duty);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
		  }
		  else if(step==5)//100
		  {
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
			  	  HAL_Delay(1);

			  	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,duty);
			  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

		  }
		  else if(step==6)//101
		  {			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
			  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
			  		HAL_Delay(1);
			  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,duty);
			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
		  }
		  else if(step==7)//111 OR 000
		  {
		  	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		  	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
		  	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		  	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		  	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		  	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

		  }

}
///////////////////////////////////////////////////////
void current_sens(void){
	vcs=(vcs_raw*1.65)/4095;
	current=(vcs-2.5)/sensitivity;
}

//////////////////////////////////////////////////////////
void can_send (uint16_t ID , uint8_t DLC , uint8_t* DATA , uint8_t* pTxMailbox){
	CAN_TxHeaderTypeDef pHeader;

	pHeader.DLC=DLC;
	pHeader.StdId=ID;
	pHeader.IDE	= CAN_ID_STD;
	pHeader.RTR= CAN_RTR_DATA;

	uint8_t halcannum;
	uint8_t mailbox;

	halcannum=HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
	if(halcannum){
		HAL_CAN_AddTxMessage(&hcan , &pHeader , DATA , &mailbox);
	}
	*pTxMailbox=mailbox;
}

void can_recive(uint16_t* ID , uint8_t* DLC , uint8_t* data , uint8_t fifo){

	CAN_RxHeaderTypeDef pHeader;


	HAL_CAN_GetRxMessage(&hcan, fifo, &pHeader, data);

	*ID  = pHeader.StdId;
	*DLC = pHeader.DLC;

}

//////////////////////////////////////////////////////////////////////////////////

void can_filter(uint16_t ID , uint16_t mask , uint8_t bank , uint8_t fifo){

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank=bank;
	sFilterConfig.FilterFIFOAssignment=fifo;
	sFilterConfig.FilterIdHigh=ID<<5;
	sFilterConfig.FilterIdLow=0;
	sFilterConfig.FilterMaskIdHigh=mask<<5;
	sFilterConfig.FilterMaskIdLow=0;
	sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale=CAN_FILTERSCALE_16BIT;
    sFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);

}

void speedsens(void){


	//getting the difrence between the pulses of hall sensor (rising and falling edge)
		  	time_val = __HAL_TIM_GET_COUNTER(&htim1);

		  if (time_val>=last_time_val)
		  {
			period = (uint32_t)((overflows*(htim1.Init.Period + 1))+(time_val-last_time_val));
		  }
		  else
		  {
			period =((overflows+1)*(htim1.Init.Period + 1))+(time_val-last_time_val);
		  }
		overflows=0;
		last_time_val=time_val;

}
////////////////////////////////////////////////////////
void speed_cal(void){
	if (period != 0) // NO division by zero
		  {
		  rpm = (1000000 * 60)/(ppr * period);
		  speed_ms = (float)(2*3.14*raduis_m*rpm)/60;
	      speed_km = (float)(speed_ms *3.6);

	      RTC_TimeTypeDef sTime;
	      RTC_DateTypeDef sDate;

	     // Get the current time
	     HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	     HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

	       seconds = sTime.Seconds;

		  }
		  distance=speed_ms*seconds;
		  total_dis+=distance;
}

/////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1)
{

        overflows++;
        //handel overflows for pulse width measurement

}
///////////////////////////////////////////////////////
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
    if (hadc->Instance == ADC1)
    {
    		duty=HAL_ADC_GetValue(&hadc1);

    }
    else if(hadc->Instance == ADC2){

    		current_raw=HAL_ADC_GetValue(&hadc2);
    }

}
///////////////////////////////////////////////////////////

/*
void delay_us(uint8_t us)
{
	__HAL_TIM_SET_COUNTER(&htim3,0);

	while(__HAL_TIM_GET_COUNTER(&htim3)<us);

}
*/
/////////////////////////////////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{


	if (GPIO_Pin == GPIO_PIN_12)

		halla_flag=1;




	else if (GPIO_Pin == GPIO_PIN_13)

		hallb_flag=1;



	else if (GPIO_Pin == GPIO_PIN_14)

			hallc_flag=1;



}

/////////////////////////////////////////////////////
void RxFifo0MsgPendingCallback()
{
 can_rx(&RXID, &RXDLC, RX_data, 0);
 ADC_RECIVED= RX_data[0] ;

}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{

	sent=1;
}
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{

	sent=1;
}
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{

	sent=1;
}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_CAN_Init();
  MX_TIM1_Init();
  MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
  HAL_TIM_Base_Start(&htim1);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_IT(&hadc2);
  can_filter(0X3F, 0XFF, 0, 0);
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_Start(&hcan);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//  get_hall();
	//  steps();
	 // comutate();
	 // current_sens();

	 // if(sent == 1)
	 // {
	 //    can_send(0x3f, 1, TX_data, &mailboxused);
	 //    sent=0;
	 // }
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);

	 // if(halla_flag==1){
	//	  speedsens();
	//	  speed_cal();
	  }

	 // speed_km;
	//  total_dis;


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{

  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 2;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 37-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 4095;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ph3L_Pin|ph2L_Pin|ph1L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : halla_Pin hallb_Pin hallc_Pin */
  GPIO_InitStruct.Pin = halla_Pin|hallb_Pin|hallc_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : ph3L_Pin ph2L_Pin ph1L_Pin */
  GPIO_InitStruct.Pin = ph3L_Pin|ph2L_Pin|ph1L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
